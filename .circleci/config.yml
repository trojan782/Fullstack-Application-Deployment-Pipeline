version: 2.1

# slack orb for sending notifications 
orbs: 
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy the back-end and front-end cloudformation stack given a workflow ID.
    parameters:
        when_destroy:
            type: string
            default: "on_fail"
    steps:
        - run:
            name: Destroy Environments
            when: on_fail
            command: |
                echo "*************--Destroying Environments--***********"
                aws s3 rm s3://udapeople=${CIRCLE_WORKFLOW_ID:0:7} --recursive
                aws s3 rb s3://udapeople=${CIRCLE_WORKFLOW_ID:0:7} --force
                aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
              cd backend
              npm install 
              npm run build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test frontend
          command: |
              cd frontend
              npm install
              npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Test Backend
          command: |
              cd backend
              npm install
              npm run test
      - slack/notify:
            channel: C03MQSHCVFZ
            event: fail
            template: basic_fail_1
      - slack/notify:
            channel: C03MQSHCVFZ
            event: pass
            template: success_tagged_deploy_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan frontend
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

  scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [scan-backend]
        - run:
            name: Scan Backend
            command: |
                cd backend
                npm install
                # npm audit fix
                npm audit fix --audit-level=critical --force
        - slack/notify:
            channel: C03MQSHCVFZ
            event: fail
            template: basic_fail_1
        - slack/notify:
            channel: C03MQSHCVFZ
            event: pass
            template: success_tagged_deploy_1

  deploy-infrastructure:
      docker:
          - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install Dependencies
            command: |
                yum install tar gzip -y
                yum update -y
        - attach_workspace:
              at: ~/
        - run:
            name: Ensure back-end infrastructure exists
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Ensure front-end infrastructure exists
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run: 
            name: Add backend ip to inventory
            command: |
                aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
        - persist_to_workspace:
              root: ~/
              paths:
                - project/.circleci/ansible/inventory.txt
        - destroy-environment
  configure-infrastructure:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8a:cc:e7:00:b1:d9:57:d9:66:59:54:8e:c1:4f:70:46"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Dependencies
          command: |
            apk add --update tar gzip ansible
            pip install awscli
      - run: 
          name: Configure Server
          command: | 
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          context:
            - slack
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          context:
            - slack
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]