version: 2.1

# slack orb for sending notifications 
orbs: 
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy the back-end and front-end cloudformation stack given a workflow ID.
    parameters:
        workflow_id:
            type: string
            default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
        - run:
            name: Destroy Environments
            when: on_fail
            command: |
                echo "*************--Destroying Environments--***********"
                aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert to the last migration
    parameters:
      workflow_id:
          type: string
          default: "${CIRCLE_WORKFLOW_ID:0:7}"
    
    steps:
      - run: 
          name: Revert Migrations
          when: on_fail
          command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/Myriiz5cvLV1w5h2rsLw5n/migration_<< parameters.workflow_id >>)
              if (( $SUCCESS == 1 ));
              then
                  cd ~/project/backend
                  npm install
                  npm run migration:revert
              fi  
          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
              cd backend
              npm install 
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test frontend
          command: |
              cd frontend
              npm install
              npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Test Backend
          command: |
              cd backend
              npm install
              npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
            channel: C03MQSHCVFZ
            event: fail
            template: basic_fail_1
      - slack/notify:
            channel: C03MQSHCVFZ
            event: pass
            template: success_tagged_deploy_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan frontend
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend

  scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [scan-backend]
        - run:
            name: Scan Backend
            command: |
                cd backend
                npm install
                # npm audit fix
                npm audit fix --audit-level=critical --force
        - save_cache:
            paths: [backend/node_modules]
            key: scan-backend
        - slack/notify:
            channel: C03MQSHCVFZ
            event: fail
            template: basic_fail_1
        - slack/notify:
            channel: C03MQSHCVFZ
            event: pass
            template: success_tagged_deploy_1

  deploy-infrastructure:
      docker:
          - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install Dependencies
            command: |
                yum install tar gzip -y
                yum update -y
        - attach_workspace:
              at: .
        - run:
            name: Ensure back-end infrastructure exists
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Ensure front-end infrastructure exists
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run: 
            name: Add backend ip to inventory
            command: |
                aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt

        - persist_to_workspace:
              root: ~/
              paths:
                - project/.circleci/ansible/inventory.txt
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8a:cc:e7:00:b1:d9:57:d9:66:59:54:8e:c1:4f:70:46"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Dependencies
          command: |
              sudo amazon-linux-extras install ansible2
              ansible --version
      - run: 
          name: Configure Server
          command: | 
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run Migrations
          command: |
              cd backend
              npm install
              npm run migrations --force > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl --insecure https://kvdb.io/Myriiz5cvLV1w5h2rsLw5n/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - revert-migrations
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run: 
          name: Install Dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs
            yum install -y python3.7
            curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
            python get-pip.py --user
            python -m pip install --user ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy Frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
      - destroy-environment
  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8a:cc:e7:00:b1:d9:57:d9:66:59:54:8e:c1:4f:70:46"]

      - run:
          name: Install dependencies
          command: |
              apk add --update ansible
              ansible --version
              apk add --update --no-cache tar gzip openssh nodejs npm curl
              pip install awscli
              aws --version
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy Backend
          command: |
              cd backend
              npm install
              npm run build
              cd ..
              # Zip the directory
              tar -C backend -czvf artifact.tar.gz .
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is: "
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            echo BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl -s "${API_URL}/api/status" | grep "ok"
            # if curl https://google.com
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

    
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          context:
            - slack
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          context:
            - slack
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]